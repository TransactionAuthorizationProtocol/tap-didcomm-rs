{"$message_type":"diagnostic","message":"the name `SSIDIDResolverWrapper` is defined multiple times","code":{"code":"E0428","explanation":"A type or module has been defined more than once.\n\nErroneous code example:\n\n```compile_fail,E0428\nstruct Bar;\nstruct Bar; // error: duplicate definition of value `Bar`\n```\n\nPlease verify you didn't misspell the type/module's name or remove/rename the\nduplicated one. Example:\n\n```\nstruct Bar;\nstruct Bar2; // ok!\n```\n"},"level":"error","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3568,"byte_end":3624,"line_start":121,"line_end":121,"column_start":1,"column_end":57,"is_primary":true,"text":[{"text":"pub struct SSIDIDResolverWrapper<T: SSIResolver>(pub T);","highlight_start":1,"highlight_end":57}],"label":"`SSIDIDResolverWrapper` redefined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":2370,"byte_end":2426,"line_start":83,"line_end":83,"column_start":1,"column_end":57,"is_primary":false,"text":[{"text":"pub struct SSIDIDResolverWrapper<T: SSIResolver>(pub T);","highlight_start":1,"highlight_end":57}],"label":"previous definition of the type `SSIDIDResolverWrapper` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`SSIDIDResolverWrapper` must be defined only once in the type namespace of this module","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0428]\u001b[0m\u001b[0m\u001b[1m: the name `SSIDIDResolverWrapper` is defined multiple times\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:121:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct SSIDIDResolverWrapper<T: SSIResolver>(pub T);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mprevious definition of the type `SSIDIDResolverWrapper` here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct SSIDIDResolverWrapper<T: SSIResolver>(pub T);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`SSIDIDResolverWrapper` redefined here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `SSIDIDResolverWrapper` must be defined only once in the type namespace of this module\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `crate::types::Message`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"tap-didcomm-core/src/pack.rs","byte_start":244,"byte_end":251,"line_start":9,"line_end":9,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"    types::{Message, PackedMessage, PackingType},","highlight_start":13,"highlight_end":20}],"label":"no `Message` in `types`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this struct through its public re-export instead:\ncrate::Message","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"a similar name exists in the module","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/pack.rs","byte_start":244,"byte_end":251,"line_start":9,"line_end":9,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"    types::{Message, PackedMessage, PackingType},","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"MessageId","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `crate::types::Message`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/pack.rs:9:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    types::{Message, PackedMessage, PackingType},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `Message` in `types`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a similar name exists in the module: `MessageId`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider importing this struct through its public re-export instead:\u001b[0m\n\u001b[0m          crate::Message\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `mockall`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"tap-didcomm-core/src/pack.rs","byte_start":3823,"byte_end":3830,"line_start":135,"line_end":135,"column_start":9,"column_end":16,"is_primary":true,"text":[{"text":"    use mockall::mock;","highlight_start":9,"highlight_end":16}],"label":"use of undeclared crate or module `mockall`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `mockall`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/pack.rs:135:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m135\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use mockall::mock;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `mockall`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `mockall`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"tap-didcomm-core/src/tests.rs","byte_start":157,"byte_end":164,"line_start":6,"line_end":6,"column_start":9,"column_end":16,"is_primary":true,"text":[{"text":"    use mockall::mock;","highlight_start":9,"highlight_end":16}],"label":"use of undeclared crate or module `mockall`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `mockall`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/tests.rs:6:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use mockall::mock;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `mockall`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `resolve_did` is not a member of trait `DIDCommPlugin`","code":{"code":"E0407","explanation":"A definition of a method not in the implemented trait was given in a trait\nimplementation.\n\nErroneous code example:\n\n```compile_fail,E0407\ntrait Foo {\n    fn a();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n    fn b() {} // error: method `b` is not a member of trait `Foo`\n}\n```\n\nPlease verify you didn't misspell the method name and you used the correct\ntrait. First example:\n\n```\ntrait Foo {\n    fn a();\n    fn b();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n    fn b() {} // ok!\n}\n```\n\nSecond example:\n\n```\ntrait Foo {\n    fn a();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n}\n\nimpl Bar {\n    fn b() {}\n}\n```\n"},"level":"error","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3738,"byte_end":4177,"line_start":128,"line_end":140,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    async fn resolve_did(&self, did: &str) -> Result<String, String> {","highlight_start":5,"highlight_end":71},{"text":"        let (metadata, doc, _) = self.0.resolve(did, &Default::default()).await;","highlight_start":1,"highlight_end":81},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        if let Some(error) = metadata.error {","highlight_start":1,"highlight_end":46},{"text":"            return Err(error);","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        if let Some(doc) = doc {","highlight_start":1,"highlight_end":33},{"text":"            serde_json::to_string(&doc).map_err(|e| e.to_string())","highlight_start":1,"highlight_end":67},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            Err(\"DID document not found\".to_string())","highlight_start":1,"highlight_end":54},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":"not a member of trait `DIDCommPlugin`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0407]\u001b[0m\u001b[0m\u001b[1m: method `resolve_did` is not a member of trait `DIDCommPlugin`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:128:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn resolve_did(&self, did: &str) -> Result<String, String> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (metadata, doc, _) = self.0.resolve(did, &Default::default()).await;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m131\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if let Some(error) = metadata.error {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot a member of trait `DIDCommPlugin`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `sign` is not a member of trait `DIDCommPlugin`","code":{"code":"E0407","explanation":"A definition of a method not in the implemented trait was given in a trait\nimplementation.\n\nErroneous code example:\n\n```compile_fail,E0407\ntrait Foo {\n    fn a();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n    fn b() {} // error: method `b` is not a member of trait `Foo`\n}\n```\n\nPlease verify you didn't misspell the method name and you used the correct\ntrait. First example:\n\n```\ntrait Foo {\n    fn a();\n    fn b();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n    fn b() {} // ok!\n}\n```\n\nSecond example:\n\n```\ntrait Foo {\n    fn a();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n}\n\nimpl Bar {\n    fn b() {}\n}\n```\n"},"level":"error","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4183,"byte_end":4335,"line_start":142,"line_end":144,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    async fn sign(&self, _data: &[u8], _key_id: &str) -> Result<Vec<u8>, String> {","highlight_start":5,"highlight_end":83},{"text":"        Err(\"Signing not implemented for DID resolver\".to_string())","highlight_start":1,"highlight_end":68},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":"not a member of trait `DIDCommPlugin`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0407]\u001b[0m\u001b[0m\u001b[1m: method `sign` is not a member of trait `DIDCommPlugin`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:142:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn sign(&self, _data: &[u8], _key_id: &str) -> Result<Vec<u8>, String> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Err(\"Signing not implemented for DID resolver\".to_string())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot a member of trait `DIDCommPlugin`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `verify` is not a member of trait `DIDCommPlugin`","code":{"code":"E0407","explanation":"A definition of a method not in the implemented trait was given in a trait\nimplementation.\n\nErroneous code example:\n\n```compile_fail,E0407\ntrait Foo {\n    fn a();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n    fn b() {} // error: method `b` is not a member of trait `Foo`\n}\n```\n\nPlease verify you didn't misspell the method name and you used the correct\ntrait. First example:\n\n```\ntrait Foo {\n    fn a();\n    fn b();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n    fn b() {} // ok!\n}\n```\n\nSecond example:\n\n```\ntrait Foo {\n    fn a();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n}\n\nimpl Bar {\n    fn b() {}\n}\n```\n"},"level":"error","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4341,"byte_end":4516,"line_start":146,"line_end":148,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    async fn verify(&self, _data: &[u8], _signature: &[u8], _key_id: &str) -> Result<bool, String> {","highlight_start":5,"highlight_end":101},{"text":"        Err(\"Verification not implemented for DID resolver\".to_string())","highlight_start":1,"highlight_end":73},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":"not a member of trait `DIDCommPlugin`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0407]\u001b[0m\u001b[0m\u001b[1m: method `verify` is not a member of trait `DIDCommPlugin`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:146:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn verify(&self, _data: &[u8], _signature: &[u8], _key_id: &str) -> Result<bool, String> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Err(\"Verification not implemented for DID resolver\".to_string())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m148\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot a member of trait `DIDCommPlugin`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `encrypt` is not a member of trait `DIDCommPlugin`","code":{"code":"E0407","explanation":"A definition of a method not in the implemented trait was given in a trait\nimplementation.\n\nErroneous code example:\n\n```compile_fail,E0407\ntrait Foo {\n    fn a();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n    fn b() {} // error: method `b` is not a member of trait `Foo`\n}\n```\n\nPlease verify you didn't misspell the method name and you used the correct\ntrait. First example:\n\n```\ntrait Foo {\n    fn a();\n    fn b();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n    fn b() {} // ok!\n}\n```\n\nSecond example:\n\n```\ntrait Foo {\n    fn a();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n}\n\nimpl Bar {\n    fn b() {}\n}\n```\n"},"level":"error","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4522,"byte_end":4689,"line_start":150,"line_end":152,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    async fn encrypt(&self, _data: &[u8], _recipients: &[String]) -> Result<Vec<u8>, String> {","highlight_start":5,"highlight_end":95},{"text":"        Err(\"Encryption not implemented for DID resolver\".to_string())","highlight_start":1,"highlight_end":71},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":"not a member of trait `DIDCommPlugin`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0407]\u001b[0m\u001b[0m\u001b[1m: method `encrypt` is not a member of trait `DIDCommPlugin`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:150:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn encrypt(&self, _data: &[u8], _recipients: &[String]) -> Result<Vec<u8>, String> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Err(\"Encryption not implemented for DID resolver\".to_string())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m152\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot a member of trait `DIDCommPlugin`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `decrypt` is not a member of trait `DIDCommPlugin`","code":{"code":"E0407","explanation":"A definition of a method not in the implemented trait was given in a trait\nimplementation.\n\nErroneous code example:\n\n```compile_fail,E0407\ntrait Foo {\n    fn a();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n    fn b() {} // error: method `b` is not a member of trait `Foo`\n}\n```\n\nPlease verify you didn't misspell the method name and you used the correct\ntrait. First example:\n\n```\ntrait Foo {\n    fn a();\n    fn b();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n    fn b() {} // ok!\n}\n```\n\nSecond example:\n\n```\ntrait Foo {\n    fn a();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n}\n\nimpl Bar {\n    fn b() {}\n}\n```\n"},"level":"error","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4695,"byte_end":4856,"line_start":154,"line_end":156,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    async fn decrypt(&self, _data: &[u8], _recipient: &str) -> Result<Vec<u8>, String> {","highlight_start":5,"highlight_end":89},{"text":"        Err(\"Decryption not implemented for DID resolver\".to_string())","highlight_start":1,"highlight_end":71},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":"not a member of trait `DIDCommPlugin`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0407]\u001b[0m\u001b[0m\u001b[1m: method `decrypt` is not a member of trait `DIDCommPlugin`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:154:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m154\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn decrypt(&self, _data: &[u8], _recipient: &str) -> Result<Vec<u8>, String> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Err(\"Decryption not implemented for DID resolver\".to_string())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot a member of trait `DIDCommPlugin`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"struct `ResolutionMetadata` is private","code":{"code":"E0603","explanation":"A private item was used outside its scope.\n\nErroneous code example:\n\n```compile_fail,E0603\nmod foo {\n    const PRIVATE: u32 = 0x_a_bad_1dea_u32; // This const is private, so we\n                                            // can't use it outside of the\n                                            // `foo` module.\n}\n\nprintln!(\"const value: {}\", foo::PRIVATE); // error: constant `PRIVATE`\n                                                  //        is private\n```\n\nIn order to fix this error, you need to make the item public by using the `pub`\nkeyword. Example:\n\n```\nmod foo {\n    pub const PRIVATE: u32 = 0x_a_bad_1dea_u32; // We set it public by using the\n                                                // `pub` keyword.\n}\n\nprintln!(\"const value: {}\", foo::PRIVATE); // ok!\n```\n"},"level":"error","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":113,"byte_end":131,"line_start":4,"line_end":4,"column_start":26,"column_end":44,"is_primary":true,"text":[{"text":"use ssi::did::{Document, ResolutionMetadata};","highlight_start":26,"highlight_end":44}],"label":"private struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the struct `ResolutionMetadata` is defined here","code":null,"level":"note","spans":[{"file_name":"/Users/pelle/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ssi-dids-0.1.1/src/lib.rs","byte_start":852,"byte_end":870,"line_start":28,"line_end":28,"column_start":48,"column_end":66,"is_primary":true,"text":[{"text":"    DocumentMetadata, ResolutionInputMetadata, ResolutionMetadata, ERROR_INVALID_DID,","highlight_start":48,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"import `ResolutionMetadata` directly","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":113,"byte_end":131,"line_start":4,"line_end":4,"column_start":26,"column_end":44,"is_primary":true,"text":[{"text":"use ssi::did::{Document, ResolutionMetadata};","highlight_start":26,"highlight_end":44}],"label":null,"suggested_replacement":"ssi_dids::did_resolve::ResolutionMetadata","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0603]\u001b[0m\u001b[0m\u001b[1m: struct `ResolutionMetadata` is private\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:4:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ssi::did::{Document, ResolutionMetadata};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mprivate struct\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the struct `ResolutionMetadata` is defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/pelle/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ssi-dids-0.1.1/src/lib.rs:28:48\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    DocumentMetadata, ResolutionInputMetadata, ResolutionMetadata, ERROR_INVALID_DID,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: import `ResolutionMetadata` directly\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse ssi::did::{Document, \u001b[0m\u001b[0m\u001b[38;5;10mssi_dids::did_resolve::ResolutionMetadata\u001b[0m\u001b[0m};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `serde_json::json`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tap-didcomm-core/src/pack.rs","byte_start":111,"byte_end":127,"line_start":4,"line_end":4,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"use serde_json::json;","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/pack.rs","byte_start":107,"byte_end":129,"line_start":4,"line_end":5,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use serde_json::json;","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `serde_json::json`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/pack.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse serde_json::json;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `DIDResolver`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tap-didcomm-core/src/pack.rs","byte_start":199,"byte_end":210,"line_start":8,"line_end":8,"column_start":29,"column_end":40,"is_primary":true,"text":[{"text":"    plugin::{DIDCommPlugin, DIDResolver, Encryptor, Signer},","highlight_start":29,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/pack.rs","byte_start":197,"byte_end":210,"line_start":8,"line_end":8,"column_start":27,"column_end":40,"is_primary":true,"text":[{"text":"    plugin::{DIDCommPlugin, DIDResolver, Encryptor, Signer},","highlight_start":27,"highlight_end":40}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `DIDResolver`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/pack.rs:8:29\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    plugin::{DIDCommPlugin, DIDResolver, Encryptor, Signer},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `async_trait::async_trait`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tap-didcomm-core/src/pack.rs","byte_start":3789,"byte_end":3813,"line_start":134,"line_end":134,"column_start":9,"column_end":33,"is_primary":true,"text":[{"text":"    use async_trait::async_trait;","highlight_start":9,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/pack.rs","byte_start":3785,"byte_end":3814,"line_start":134,"line_end":134,"column_start":5,"column_end":34,"is_primary":true,"text":[{"text":"    use async_trait::async_trait;","highlight_start":5,"highlight_end":34}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `async_trait::async_trait`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/pack.rs:134:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use async_trait::async_trait;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `Document`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":103,"byte_end":111,"line_start":4,"line_end":4,"column_start":16,"column_end":24,"is_primary":true,"text":[{"text":"use ssi::did::{Document, ResolutionMetadata};","highlight_start":16,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":103,"byte_end":113,"line_start":4,"line_end":4,"column_start":16,"column_end":26,"is_primary":true,"text":[{"text":"use ssi::did::{Document, ResolutionMetadata};","highlight_start":16,"highlight_end":26}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":102,"byte_end":103,"line_start":4,"line_end":4,"column_start":15,"column_end":16,"is_primary":true,"text":[{"text":"use ssi::did::{Document, ResolutionMetadata};","highlight_start":15,"highlight_end":16}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":131,"byte_end":132,"line_start":4,"line_end":4,"column_start":44,"column_end":45,"is_primary":true,"text":[{"text":"use ssi::did::{Document, ResolutionMetadata};","highlight_start":44,"highlight_end":45}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Document`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:4:16\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ssi::did::{Document, ResolutionMetadata};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `super::*`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tap-didcomm-core/src/tests.rs","byte_start":33,"byte_end":41,"line_start":3,"line_end":3,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"    use super::*;","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/tests.rs","byte_start":29,"byte_end":42,"line_start":3,"line_end":3,"column_start":5,"column_end":18,"is_primary":true,"text":[{"text":"    use super::*;","highlight_start":5,"highlight_end":18}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `super::*`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/tests.rs:3:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use super::*;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `DIDCommPlugin`, `DIDResolver`, `Encryptor`, and `Signer`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tap-didcomm-core/src/tests.rs","byte_start":67,"byte_end":80,"line_start":4,"line_end":4,"column_start":25,"column_end":38,"is_primary":true,"text":[{"text":"    use crate::plugin::{DIDCommPlugin, DIDResolver, Encryptor, Signer};","highlight_start":25,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tap-didcomm-core/src/tests.rs","byte_start":82,"byte_end":93,"line_start":4,"line_end":4,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    use crate::plugin::{DIDCommPlugin, DIDResolver, Encryptor, Signer};","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tap-didcomm-core/src/tests.rs","byte_start":95,"byte_end":104,"line_start":4,"line_end":4,"column_start":53,"column_end":62,"is_primary":true,"text":[{"text":"    use crate::plugin::{DIDCommPlugin, DIDResolver, Encryptor, Signer};","highlight_start":53,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tap-didcomm-core/src/tests.rs","byte_start":106,"byte_end":112,"line_start":4,"line_end":4,"column_start":64,"column_end":70,"is_primary":true,"text":[{"text":"    use crate::plugin::{DIDCommPlugin, DIDResolver, Encryptor, Signer};","highlight_start":64,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/tests.rs","byte_start":47,"byte_end":114,"line_start":4,"line_end":4,"column_start":5,"column_end":72,"is_primary":true,"text":[{"text":"    use crate::plugin::{DIDCommPlugin, DIDResolver, Encryptor, Signer};","highlight_start":5,"highlight_end":72}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `DIDCommPlugin`, `DIDResolver`, `Encryptor`, and `Signer`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/tests.rs:4:25\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use crate::plugin::{DIDCommPlugin, DIDResolver, Encryptor, Signer};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `async_trait::async_trait`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tap-didcomm-core/src/tests.rs","byte_start":123,"byte_end":147,"line_start":5,"line_end":5,"column_start":9,"column_end":33,"is_primary":true,"text":[{"text":"    use async_trait::async_trait;","highlight_start":9,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/tests.rs","byte_start":119,"byte_end":148,"line_start":5,"line_end":5,"column_start":5,"column_end":34,"is_primary":true,"text":[{"text":"    use async_trait::async_trait;","highlight_start":5,"highlight_end":34}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `async_trait::async_trait`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/tests.rs:5:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use async_trait::async_trait;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"type alias takes 1 generic argument but 2 generic arguments were supplied","code":{"code":"E0107","explanation":"An incorrect number of generic arguments was provided.\n\nErroneous code example:\n\n```compile_fail,E0107\nstruct Foo<T> { x: T }\n\nstruct Bar { x: Foo }             // error: wrong number of type arguments:\n                                  //        expected 1, found 0\nstruct Baz<S, T> { x: Foo<S, T> } // error: wrong number of type arguments:\n                                  //        expected 1, found 2\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool>(x);                 // error: wrong number of type arguments:\n                                    //        expected 2, found 1\n    foo::<bool, i32, i32>(x, 2, 4); // error: wrong number of type arguments:\n                                    //        expected 2, found 3\n    f::<'static>();                 // error: wrong number of lifetime arguments\n                                    //        expected 0, found 1\n}\n```\n\nWhen using/declaring an item with generic arguments, you must provide the exact\nsame number:\n\n```\nstruct Foo<T> { x: T }\n\nstruct Bar<T> { x: Foo<T> }               // ok!\nstruct Baz<S, T> { x: Foo<S>, y: Foo<T> } // ok!\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool, u32>(x, 12);              // ok!\n    f();                                  // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3780,"byte_end":3786,"line_start":128,"line_end":128,"column_start":47,"column_end":53,"is_primary":true,"text":[{"text":"    async fn resolve_did(&self, did: &str) -> Result<String, String> {","highlight_start":47,"highlight_end":53}],"label":"expected 1 generic argument","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"type alias defined here, with 1 generic parameter: `T`","code":null,"level":"note","spans":[{"file_name":"tap-didcomm-core/src/error.rs","byte_start":1673,"byte_end":1674,"line_start":59,"line_end":59,"column_start":17,"column_end":18,"is_primary":false,"text":[{"text":"pub type Result<T> = std::result::Result<T, Error>; ","highlight_start":17,"highlight_end":18}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tap-didcomm-core/src/error.rs","byte_start":1666,"byte_end":1672,"line_start":59,"line_end":59,"column_start":10,"column_end":16,"is_primary":true,"text":[{"text":"pub type Result<T> = std::result::Result<T, Error>; ","highlight_start":10,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"remove the unnecessary generic argument","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3793,"byte_end":3801,"line_start":128,"line_end":128,"column_start":60,"column_end":68,"is_primary":true,"text":[{"text":"    async fn resolve_did(&self, did: &str) -> Result<String, String> {","highlight_start":60,"highlight_end":68}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0107]\u001b[0m\u001b[0m\u001b[1m: type alias takes 1 generic argument but 2 generic arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:128:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn resolve_did(&self, did: &str) -> Result<String, String> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove the unnecessary generic argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 1 generic argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: type alias defined here, with 1 generic parameter: `T`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/error.rs:59:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub type Result<T> = std::result::Result<T, Error>; \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"type alias takes 1 generic argument but 2 generic arguments were supplied","code":{"code":"E0107","explanation":"An incorrect number of generic arguments was provided.\n\nErroneous code example:\n\n```compile_fail,E0107\nstruct Foo<T> { x: T }\n\nstruct Bar { x: Foo }             // error: wrong number of type arguments:\n                                  //        expected 1, found 0\nstruct Baz<S, T> { x: Foo<S, T> } // error: wrong number of type arguments:\n                                  //        expected 1, found 2\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool>(x);                 // error: wrong number of type arguments:\n                                    //        expected 2, found 1\n    foo::<bool, i32, i32>(x, 2, 4); // error: wrong number of type arguments:\n                                    //        expected 2, found 3\n    f::<'static>();                 // error: wrong number of lifetime arguments\n                                    //        expected 0, found 1\n}\n```\n\nWhen using/declaring an item with generic arguments, you must provide the exact\nsame number:\n\n```\nstruct Foo<T> { x: T }\n\nstruct Bar<T> { x: Foo<T> }               // ok!\nstruct Baz<S, T> { x: Foo<S>, y: Foo<T> } // ok!\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool, u32>(x, 12);              // ok!\n    f();                                  // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4236,"byte_end":4242,"line_start":142,"line_end":142,"column_start":58,"column_end":64,"is_primary":true,"text":[{"text":"    async fn sign(&self, _data: &[u8], _key_id: &str) -> Result<Vec<u8>, String> {","highlight_start":58,"highlight_end":64}],"label":"expected 1 generic argument","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"type alias defined here, with 1 generic parameter: `T`","code":null,"level":"note","spans":[{"file_name":"tap-didcomm-core/src/error.rs","byte_start":1673,"byte_end":1674,"line_start":59,"line_end":59,"column_start":17,"column_end":18,"is_primary":false,"text":[{"text":"pub type Result<T> = std::result::Result<T, Error>; ","highlight_start":17,"highlight_end":18}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tap-didcomm-core/src/error.rs","byte_start":1666,"byte_end":1672,"line_start":59,"line_end":59,"column_start":10,"column_end":16,"is_primary":true,"text":[{"text":"pub type Result<T> = std::result::Result<T, Error>; ","highlight_start":10,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"remove the unnecessary generic argument","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4250,"byte_end":4258,"line_start":142,"line_end":142,"column_start":72,"column_end":80,"is_primary":true,"text":[{"text":"    async fn sign(&self, _data: &[u8], _key_id: &str) -> Result<Vec<u8>, String> {","highlight_start":72,"highlight_end":80}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0107]\u001b[0m\u001b[0m\u001b[1m: type alias takes 1 generic argument but 2 generic arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:142:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn sign(&self, _data: &[u8], _key_id: &str) -> Result<Vec<u8>, String> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove the unnecessary generic argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 1 generic argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: type alias defined here, with 1 generic parameter: `T`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/error.rs:59:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub type Result<T> = std::result::Result<T, Error>; \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"type alias takes 1 generic argument but 2 generic arguments were supplied","code":{"code":"E0107","explanation":"An incorrect number of generic arguments was provided.\n\nErroneous code example:\n\n```compile_fail,E0107\nstruct Foo<T> { x: T }\n\nstruct Bar { x: Foo }             // error: wrong number of type arguments:\n                                  //        expected 1, found 0\nstruct Baz<S, T> { x: Foo<S, T> } // error: wrong number of type arguments:\n                                  //        expected 1, found 2\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool>(x);                 // error: wrong number of type arguments:\n                                    //        expected 2, found 1\n    foo::<bool, i32, i32>(x, 2, 4); // error: wrong number of type arguments:\n                                    //        expected 2, found 3\n    f::<'static>();                 // error: wrong number of lifetime arguments\n                                    //        expected 0, found 1\n}\n```\n\nWhen using/declaring an item with generic arguments, you must provide the exact\nsame number:\n\n```\nstruct Foo<T> { x: T }\n\nstruct Bar<T> { x: Foo<T> }               // ok!\nstruct Baz<S, T> { x: Foo<S>, y: Foo<T> } // ok!\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool, u32>(x, 12);              // ok!\n    f();                                  // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4415,"byte_end":4421,"line_start":146,"line_end":146,"column_start":79,"column_end":85,"is_primary":true,"text":[{"text":"    async fn verify(&self, _data: &[u8], _signature: &[u8], _key_id: &str) -> Result<bool, String> {","highlight_start":79,"highlight_end":85}],"label":"expected 1 generic argument","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"type alias defined here, with 1 generic parameter: `T`","code":null,"level":"note","spans":[{"file_name":"tap-didcomm-core/src/error.rs","byte_start":1673,"byte_end":1674,"line_start":59,"line_end":59,"column_start":17,"column_end":18,"is_primary":false,"text":[{"text":"pub type Result<T> = std::result::Result<T, Error>; ","highlight_start":17,"highlight_end":18}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tap-didcomm-core/src/error.rs","byte_start":1666,"byte_end":1672,"line_start":59,"line_end":59,"column_start":10,"column_end":16,"is_primary":true,"text":[{"text":"pub type Result<T> = std::result::Result<T, Error>; ","highlight_start":10,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"remove the unnecessary generic argument","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4426,"byte_end":4434,"line_start":146,"line_end":146,"column_start":90,"column_end":98,"is_primary":true,"text":[{"text":"    async fn verify(&self, _data: &[u8], _signature: &[u8], _key_id: &str) -> Result<bool, String> {","highlight_start":90,"highlight_end":98}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0107]\u001b[0m\u001b[0m\u001b[1m: type alias takes 1 generic argument but 2 generic arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:146:79\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn verify(&self, _data: &[u8], _signature: &[u8], _key_id: &str) -> Result<bool, String> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove the unnecessary generic argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 1 generic argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: type alias defined here, with 1 generic parameter: `T`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/error.rs:59:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub type Result<T> = std::result::Result<T, Error>; \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"type alias takes 1 generic argument but 2 generic arguments were supplied","code":{"code":"E0107","explanation":"An incorrect number of generic arguments was provided.\n\nErroneous code example:\n\n```compile_fail,E0107\nstruct Foo<T> { x: T }\n\nstruct Bar { x: Foo }             // error: wrong number of type arguments:\n                                  //        expected 1, found 0\nstruct Baz<S, T> { x: Foo<S, T> } // error: wrong number of type arguments:\n                                  //        expected 1, found 2\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool>(x);                 // error: wrong number of type arguments:\n                                    //        expected 2, found 1\n    foo::<bool, i32, i32>(x, 2, 4); // error: wrong number of type arguments:\n                                    //        expected 2, found 3\n    f::<'static>();                 // error: wrong number of lifetime arguments\n                                    //        expected 0, found 1\n}\n```\n\nWhen using/declaring an item with generic arguments, you must provide the exact\nsame number:\n\n```\nstruct Foo<T> { x: T }\n\nstruct Bar<T> { x: Foo<T> }               // ok!\nstruct Baz<S, T> { x: Foo<S>, y: Foo<T> } // ok!\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool, u32>(x, 12);              // ok!\n    f();                                  // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4587,"byte_end":4593,"line_start":150,"line_end":150,"column_start":70,"column_end":76,"is_primary":true,"text":[{"text":"    async fn encrypt(&self, _data: &[u8], _recipients: &[String]) -> Result<Vec<u8>, String> {","highlight_start":70,"highlight_end":76}],"label":"expected 1 generic argument","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"type alias defined here, with 1 generic parameter: `T`","code":null,"level":"note","spans":[{"file_name":"tap-didcomm-core/src/error.rs","byte_start":1673,"byte_end":1674,"line_start":59,"line_end":59,"column_start":17,"column_end":18,"is_primary":false,"text":[{"text":"pub type Result<T> = std::result::Result<T, Error>; ","highlight_start":17,"highlight_end":18}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tap-didcomm-core/src/error.rs","byte_start":1666,"byte_end":1672,"line_start":59,"line_end":59,"column_start":10,"column_end":16,"is_primary":true,"text":[{"text":"pub type Result<T> = std::result::Result<T, Error>; ","highlight_start":10,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"remove the unnecessary generic argument","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4601,"byte_end":4609,"line_start":150,"line_end":150,"column_start":84,"column_end":92,"is_primary":true,"text":[{"text":"    async fn encrypt(&self, _data: &[u8], _recipients: &[String]) -> Result<Vec<u8>, String> {","highlight_start":84,"highlight_end":92}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0107]\u001b[0m\u001b[0m\u001b[1m: type alias takes 1 generic argument but 2 generic arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:150:70\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn encrypt(&self, _data: &[u8], _recipients: &[String]) -> Result<Vec<u8>, String> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove the unnecessary generic argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 1 generic argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: type alias defined here, with 1 generic parameter: `T`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/error.rs:59:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub type Result<T> = std::result::Result<T, Error>; \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"type alias takes 1 generic argument but 2 generic arguments were supplied","code":{"code":"E0107","explanation":"An incorrect number of generic arguments was provided.\n\nErroneous code example:\n\n```compile_fail,E0107\nstruct Foo<T> { x: T }\n\nstruct Bar { x: Foo }             // error: wrong number of type arguments:\n                                  //        expected 1, found 0\nstruct Baz<S, T> { x: Foo<S, T> } // error: wrong number of type arguments:\n                                  //        expected 1, found 2\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool>(x);                 // error: wrong number of type arguments:\n                                    //        expected 2, found 1\n    foo::<bool, i32, i32>(x, 2, 4); // error: wrong number of type arguments:\n                                    //        expected 2, found 3\n    f::<'static>();                 // error: wrong number of lifetime arguments\n                                    //        expected 0, found 1\n}\n```\n\nWhen using/declaring an item with generic arguments, you must provide the exact\nsame number:\n\n```\nstruct Foo<T> { x: T }\n\nstruct Bar<T> { x: Foo<T> }               // ok!\nstruct Baz<S, T> { x: Foo<S>, y: Foo<T> } // ok!\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool, u32>(x, 12);              // ok!\n    f();                                  // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4754,"byte_end":4760,"line_start":154,"line_end":154,"column_start":64,"column_end":70,"is_primary":true,"text":[{"text":"    async fn decrypt(&self, _data: &[u8], _recipient: &str) -> Result<Vec<u8>, String> {","highlight_start":64,"highlight_end":70}],"label":"expected 1 generic argument","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"type alias defined here, with 1 generic parameter: `T`","code":null,"level":"note","spans":[{"file_name":"tap-didcomm-core/src/error.rs","byte_start":1673,"byte_end":1674,"line_start":59,"line_end":59,"column_start":17,"column_end":18,"is_primary":false,"text":[{"text":"pub type Result<T> = std::result::Result<T, Error>; ","highlight_start":17,"highlight_end":18}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tap-didcomm-core/src/error.rs","byte_start":1666,"byte_end":1672,"line_start":59,"line_end":59,"column_start":10,"column_end":16,"is_primary":true,"text":[{"text":"pub type Result<T> = std::result::Result<T, Error>; ","highlight_start":10,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"remove the unnecessary generic argument","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4768,"byte_end":4776,"line_start":154,"line_end":154,"column_start":78,"column_end":86,"is_primary":true,"text":[{"text":"    async fn decrypt(&self, _data: &[u8], _recipient: &str) -> Result<Vec<u8>, String> {","highlight_start":78,"highlight_end":86}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0107]\u001b[0m\u001b[0m\u001b[1m: type alias takes 1 generic argument but 2 generic arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:154:64\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m154\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn decrypt(&self, _data: &[u8], _recipient: &str) -> Result<Vec<u8>, String> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove the unnecessary generic argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 1 generic argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: type alias defined here, with 1 generic parameter: `T`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/error.rs:59:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub type Result<T> = std::result::Result<T, Error>; \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"not all trait items implemented, missing: `as_resolver`, `as_signer`, `as_encryptor`","code":{"code":"E0046","explanation":"Items are missing in a trait implementation.\n\nErroneous code example:\n\n```compile_fail,E0046\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {}\n// error: not all trait items implemented, missing: `foo`\n```\n\nWhen trying to make some type implement a trait `Foo`, you must, at minimum,\nprovide implementations for all of `Foo`'s required methods (meaning the\nmethods that do not have default implementations), as well as any required\ntrait items like associated types or constants. Example:\n\n```\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn foo() {} // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3641,"byte_end":3731,"line_start":124,"line_end":126,"column_start":1,"column_end":34,"is_primary":true,"text":[{"text":"impl<T> DIDCommPlugin for SSIDIDResolverWrapper<T>","highlight_start":1,"highlight_end":51},{"text":"where","highlight_start":1,"highlight_end":6},{"text":"    T: SSIResolver + Send + Sync,","highlight_start":1,"highlight_end":34}],"label":"missing `as_resolver`, `as_signer`, `as_encryptor` in implementation","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3265,"byte_end":3307,"line_start":111,"line_end":111,"column_start":5,"column_end":47,"is_primary":false,"text":[{"text":"    fn as_resolver(&self) -> &dyn DIDResolver;","highlight_start":5,"highlight_end":47}],"label":"`as_resolver` from trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3353,"byte_end":3388,"line_start":114,"line_end":114,"column_start":5,"column_end":40,"is_primary":false,"text":[{"text":"    fn as_signer(&self) -> &dyn Signer;","highlight_start":5,"highlight_end":40}],"label":"`as_signer` from trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3437,"byte_end":3478,"line_start":117,"line_end":117,"column_start":5,"column_end":46,"is_primary":false,"text":[{"text":"    fn as_encryptor(&self) -> &dyn Encryptor;","highlight_start":5,"highlight_end":46}],"label":"`as_encryptor` from trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"implement the missing item: `fn as_resolver(&self) -> &dyn plugin::DIDResolver { todo!() }`","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4857,"byte_end":4857,"line_start":157,"line_end":157,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"} ","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"fn as_resolver(&self) -> &dyn plugin::DIDResolver { todo!() }\n","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null},{"message":"implement the missing item: `fn as_signer(&self) -> &dyn Signer { todo!() }`","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4857,"byte_end":4857,"line_start":157,"line_end":157,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"} ","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"fn as_signer(&self) -> &dyn Signer { todo!() }\n","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null},{"message":"implement the missing item: `fn as_encryptor(&self) -> &dyn Encryptor { todo!() }`","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4857,"byte_end":4857,"line_start":157,"line_end":157,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"} ","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"fn as_encryptor(&self) -> &dyn Encryptor { todo!() }\n","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0046]\u001b[0m\u001b[0m\u001b[1m: not all trait items implemented, missing: `as_resolver`, `as_signer`, `as_encryptor`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:124:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    fn as_resolver(&self) -> &dyn DIDResolver;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`as_resolver` from trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    fn as_signer(&self) -> &dyn Signer;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`as_signer` from trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    fn as_encryptor(&self) -> &dyn Encryptor;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`as_encryptor` from trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<T> DIDCommPlugin for SSIDIDResolverWrapper<T>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: SSIResolver + Send + Sync,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________________________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `as_resolver`, `as_signer`, `as_encryptor` in implementation\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared type `MockPlugin`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"tap-didcomm-core/src/pack.rs","byte_start":5607,"byte_end":5617,"line_start":198,"line_end":198,"column_start":26,"column_end":36,"is_primary":true,"text":[{"text":"        let mut plugin = MockPlugin::new();","highlight_start":26,"highlight_end":36}],"label":"use of undeclared type `MockPlugin`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockPlugin`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/pack.rs:198:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m198\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut plugin = MockPlugin::new();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type `MockPlugin`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared type `MockPlugin`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"tap-didcomm-core/src/pack.rs","byte_start":6527,"byte_end":6537,"line_start":225,"line_end":225,"column_start":26,"column_end":36,"is_primary":true,"text":[{"text":"        let mut plugin = MockPlugin::new();","highlight_start":26,"highlight_end":36}],"label":"use of undeclared type `MockPlugin`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockPlugin`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/pack.rs:225:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut plugin = MockPlugin::new();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type `MockPlugin`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared type `MockPlugin`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"tap-didcomm-core/src/pack.rs","byte_start":7587,"byte_end":7597,"line_start":254,"line_end":254,"column_start":26,"column_end":36,"is_primary":true,"text":[{"text":"        let mut plugin = MockPlugin::new();","highlight_start":26,"highlight_end":36}],"label":"use of undeclared type `MockPlugin`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockPlugin`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/pack.rs:254:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m254\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut plugin = MockPlugin::new();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type `MockPlugin`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3964,"byte_end":3969,"line_start":132,"line_end":132,"column_start":24,"column_end":29,"is_primary":true,"text":[{"text":"            return Err(error);","highlight_start":24,"highlight_end":29}],"label":"expected `Error`, found `String`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3960,"byte_end":3963,"line_start":132,"line_end":132,"column_start":20,"column_end":23,"is_primary":false,"text":[{"text":"            return Err(error);","highlight_start":20,"highlight_end":23}],"label":"arguments to this enum variant are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type constructed contains `std::string::String` due to the type of the argument passed","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3964,"byte_end":3969,"line_start":132,"line_end":132,"column_start":24,"column_end":29,"is_primary":false,"text":[{"text":"            return Err(error);","highlight_start":24,"highlight_end":29}],"label":"this argument influences the type of `Err`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3960,"byte_end":3970,"line_start":132,"line_end":132,"column_start":20,"column_end":30,"is_primary":true,"text":[{"text":"            return Err(error);","highlight_start":20,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"tuple variant defined here","code":null,"level":"note","spans":[{"file_name":"/rustc/e71f9a9a98b0faf423844bf0ba7438f29dc27d58/library/core/src/result.rs","byte_start":19916,"byte_end":19919,"line_start":537,"line_end":537,"column_start":5,"column_end":8,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"try wrapping the expression in a variant of `error::Error`","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3964,"byte_end":3964,"line_start":132,"line_end":132,"column_start":24,"column_end":24,"is_primary":true,"text":[{"text":"            return Err(error);","highlight_start":24,"highlight_end":24}],"label":null,"suggested_replacement":"error::Error::DIDResolution(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3969,"byte_end":3969,"line_start":132,"line_end":132,"column_start":29,"column_end":29,"is_primary":true,"text":[{"text":"            return Err(error);","highlight_start":29,"highlight_end":29}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3964,"byte_end":3964,"line_start":132,"line_end":132,"column_start":24,"column_end":24,"is_primary":true,"text":[{"text":"            return Err(error);","highlight_start":24,"highlight_end":24}],"label":null,"suggested_replacement":"error::Error::Signing(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3969,"byte_end":3969,"line_start":132,"line_end":132,"column_start":29,"column_end":29,"is_primary":true,"text":[{"text":"            return Err(error);","highlight_start":29,"highlight_end":29}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3964,"byte_end":3964,"line_start":132,"line_end":132,"column_start":24,"column_end":24,"is_primary":true,"text":[{"text":"            return Err(error);","highlight_start":24,"highlight_end":24}],"label":null,"suggested_replacement":"error::Error::Verification(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3969,"byte_end":3969,"line_start":132,"line_end":132,"column_start":29,"column_end":29,"is_primary":true,"text":[{"text":"            return Err(error);","highlight_start":29,"highlight_end":29}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3964,"byte_end":3964,"line_start":132,"line_end":132,"column_start":24,"column_end":24,"is_primary":true,"text":[{"text":"            return Err(error);","highlight_start":24,"highlight_end":24}],"label":null,"suggested_replacement":"error::Error::Encryption(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3969,"byte_end":3969,"line_start":132,"line_end":132,"column_start":29,"column_end":29,"is_primary":true,"text":[{"text":"            return Err(error);","highlight_start":29,"highlight_end":29}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3964,"byte_end":3964,"line_start":132,"line_end":132,"column_start":24,"column_end":24,"is_primary":true,"text":[{"text":"            return Err(error);","highlight_start":24,"highlight_end":24}],"label":null,"suggested_replacement":"error::Error::Decryption(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3969,"byte_end":3969,"line_start":132,"line_end":132,"column_start":29,"column_end":29,"is_primary":true,"text":[{"text":"            return Err(error);","highlight_start":29,"highlight_end":29}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3964,"byte_end":3964,"line_start":132,"line_end":132,"column_start":24,"column_end":24,"is_primary":true,"text":[{"text":"            return Err(error);","highlight_start":24,"highlight_end":24}],"label":null,"suggested_replacement":"error::Error::InvalidFormat(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3969,"byte_end":3969,"line_start":132,"line_end":132,"column_start":29,"column_end":29,"is_primary":true,"text":[{"text":"            return Err(error);","highlight_start":29,"highlight_end":29}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3964,"byte_end":3964,"line_start":132,"line_end":132,"column_start":24,"column_end":24,"is_primary":true,"text":[{"text":"            return Err(error);","highlight_start":24,"highlight_end":24}],"label":null,"suggested_replacement":"error::Error::PluginNotAvailable(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3969,"byte_end":3969,"line_start":132,"line_end":132,"column_start":29,"column_end":29,"is_primary":true,"text":[{"text":"            return Err(error);","highlight_start":29,"highlight_end":29}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3964,"byte_end":3964,"line_start":132,"line_end":132,"column_start":24,"column_end":24,"is_primary":true,"text":[{"text":"            return Err(error);","highlight_start":24,"highlight_end":24}],"label":null,"suggested_replacement":"error::Error::SSI(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3969,"byte_end":3969,"line_start":132,"line_end":132,"column_start":29,"column_end":29,"is_primary":true,"text":[{"text":"            return Err(error);","highlight_start":29,"highlight_end":29}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3964,"byte_end":3964,"line_start":132,"line_end":132,"column_start":24,"column_end":24,"is_primary":true,"text":[{"text":"            return Err(error);","highlight_start":24,"highlight_end":24}],"label":null,"suggested_replacement":"error::Error::Base64Decode(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3969,"byte_end":3969,"line_start":132,"line_end":132,"column_start":29,"column_end":29,"is_primary":true,"text":[{"text":"            return Err(error);","highlight_start":29,"highlight_end":29}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:132:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            return Err(error);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Error`, found `String`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this enum variant are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the type constructed contains `std::string::String` due to the type of the argument passed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:132:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            return Err(error);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis argument influences the type of `Err`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: tuple variant defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/rustc/e71f9a9a98b0faf423844bf0ba7438f29dc27d58/library/core/src/result.rs:537:5\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try wrapping the expression in a variant of `error::Error`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            return Err(\u001b[0m\u001b[0m\u001b[38;5;10merror::Error::DIDResolution(\u001b[0m\u001b[0merror\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++++++++\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            return Err(\u001b[0m\u001b[0m\u001b[38;5;10merror::Error::Signing(\u001b[0m\u001b[0merror\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            return Err(\u001b[0m\u001b[0m\u001b[38;5;10merror::Error::Verification(\u001b[0m\u001b[0merror\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++++\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            return Err(\u001b[0m\u001b[0m\u001b[38;5;10merror::Error::Encryption(\u001b[0m\u001b[0merror\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m      and 5 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4036,"byte_end":4090,"line_start":136,"line_end":136,"column_start":13,"column_end":67,"is_primary":true,"text":[{"text":"            serde_json::to_string(&doc).map_err(|e| e.to_string())","highlight_start":13,"highlight_end":67}],"label":"expected `Result<String, Error>`, found `Result<String, String>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected enum `std::result::Result<_, error::Error>`\n   found enum `std::result::Result<_, std::string::String>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"return type inferred to be `std::result::Result<std::string::String, error::Error>` here","code":null,"level":"note","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3626,"byte_end":3640,"line_start":123,"line_end":123,"column_start":1,"column_end":15,"is_primary":true,"text":[{"text":"#[async_trait]","highlight_start":1,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":3626,"byte_end":3640,"line_start":123,"line_end":123,"column_start":1,"column_end":15,"is_primary":false,"text":[{"text":"#[async_trait]","highlight_start":1,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[async_trait]","def_site_span":{"file_name":"/Users/pelle/.cargo/registry/src/index.crates.io-6f17d22bba15001f/async-trait-0.1.86/src/lib.rs","byte_start":7436,"byte_end":7508,"line_start":251,"line_end":251,"column_start":1,"column_end":73,"is_primary":false,"text":[{"text":"pub fn async_trait(args: TokenStream, input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:136:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m136\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            serde_json::to_string(&doc).map_err(|e| e.to_string())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Result<String, Error>`, found `Result<String, String>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected enum `std::result::Result<_, \u001b[0m\u001b[0m\u001b[1m\u001b[35merror::Error\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m               found enum `std::result::Result<_, \u001b[0m\u001b[0m\u001b[1m\u001b[35mstd::string::String\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: return type inferred to be `std::result::Result<std::string::String, error::Error>` here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:123:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[async_trait]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `async_trait` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4124,"byte_end":4160,"line_start":138,"line_end":138,"column_start":17,"column_end":53,"is_primary":true,"text":[{"text":"            Err(\"DID document not found\".to_string())","highlight_start":17,"highlight_end":53}],"label":"expected `Error`, found `String`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4120,"byte_end":4123,"line_start":138,"line_end":138,"column_start":13,"column_end":16,"is_primary":false,"text":[{"text":"            Err(\"DID document not found\".to_string())","highlight_start":13,"highlight_end":16}],"label":"arguments to this enum variant are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type constructed contains `std::string::String` due to the type of the argument passed","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4124,"byte_end":4160,"line_start":138,"line_end":138,"column_start":17,"column_end":53,"is_primary":false,"text":[{"text":"            Err(\"DID document not found\".to_string())","highlight_start":17,"highlight_end":53}],"label":"this argument influences the type of `Err`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4120,"byte_end":4161,"line_start":138,"line_end":138,"column_start":13,"column_end":54,"is_primary":true,"text":[{"text":"            Err(\"DID document not found\".to_string())","highlight_start":13,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"tuple variant defined here","code":null,"level":"note","spans":[{"file_name":"/rustc/e71f9a9a98b0faf423844bf0ba7438f29dc27d58/library/core/src/result.rs","byte_start":19916,"byte_end":19919,"line_start":537,"line_end":537,"column_start":5,"column_end":8,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"try wrapping the expression in a variant of `error::Error`","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4124,"byte_end":4124,"line_start":138,"line_end":138,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"            Err(\"DID document not found\".to_string())","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"error::Error::DIDResolution(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4160,"byte_end":4160,"line_start":138,"line_end":138,"column_start":53,"column_end":53,"is_primary":true,"text":[{"text":"            Err(\"DID document not found\".to_string())","highlight_start":53,"highlight_end":53}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4124,"byte_end":4124,"line_start":138,"line_end":138,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"            Err(\"DID document not found\".to_string())","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"error::Error::Signing(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4160,"byte_end":4160,"line_start":138,"line_end":138,"column_start":53,"column_end":53,"is_primary":true,"text":[{"text":"            Err(\"DID document not found\".to_string())","highlight_start":53,"highlight_end":53}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4124,"byte_end":4124,"line_start":138,"line_end":138,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"            Err(\"DID document not found\".to_string())","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"error::Error::Verification(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4160,"byte_end":4160,"line_start":138,"line_end":138,"column_start":53,"column_end":53,"is_primary":true,"text":[{"text":"            Err(\"DID document not found\".to_string())","highlight_start":53,"highlight_end":53}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4124,"byte_end":4124,"line_start":138,"line_end":138,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"            Err(\"DID document not found\".to_string())","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"error::Error::Encryption(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4160,"byte_end":4160,"line_start":138,"line_end":138,"column_start":53,"column_end":53,"is_primary":true,"text":[{"text":"            Err(\"DID document not found\".to_string())","highlight_start":53,"highlight_end":53}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4124,"byte_end":4124,"line_start":138,"line_end":138,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"            Err(\"DID document not found\".to_string())","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"error::Error::Decryption(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4160,"byte_end":4160,"line_start":138,"line_end":138,"column_start":53,"column_end":53,"is_primary":true,"text":[{"text":"            Err(\"DID document not found\".to_string())","highlight_start":53,"highlight_end":53}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4124,"byte_end":4124,"line_start":138,"line_end":138,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"            Err(\"DID document not found\".to_string())","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"error::Error::InvalidFormat(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4160,"byte_end":4160,"line_start":138,"line_end":138,"column_start":53,"column_end":53,"is_primary":true,"text":[{"text":"            Err(\"DID document not found\".to_string())","highlight_start":53,"highlight_end":53}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4124,"byte_end":4124,"line_start":138,"line_end":138,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"            Err(\"DID document not found\".to_string())","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"error::Error::PluginNotAvailable(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4160,"byte_end":4160,"line_start":138,"line_end":138,"column_start":53,"column_end":53,"is_primary":true,"text":[{"text":"            Err(\"DID document not found\".to_string())","highlight_start":53,"highlight_end":53}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4124,"byte_end":4124,"line_start":138,"line_end":138,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"            Err(\"DID document not found\".to_string())","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"error::Error::SSI(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4160,"byte_end":4160,"line_start":138,"line_end":138,"column_start":53,"column_end":53,"is_primary":true,"text":[{"text":"            Err(\"DID document not found\".to_string())","highlight_start":53,"highlight_end":53}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4124,"byte_end":4124,"line_start":138,"line_end":138,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"            Err(\"DID document not found\".to_string())","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"error::Error::Base64Decode(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4160,"byte_end":4160,"line_start":138,"line_end":138,"column_start":53,"column_end":53,"is_primary":true,"text":[{"text":"            Err(\"DID document not found\".to_string())","highlight_start":53,"highlight_end":53}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:138:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Err(\"DID document not found\".to_string())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Error`, found `String`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this enum variant are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the type constructed contains `std::string::String` due to the type of the argument passed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:138:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Err(\"DID document not found\".to_string())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis argument influences the type of `Err`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: tuple variant defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/rustc/e71f9a9a98b0faf423844bf0ba7438f29dc27d58/library/core/src/result.rs:537:5\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try wrapping the expression in a variant of `error::Error`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            Err(\u001b[0m\u001b[0m\u001b[38;5;10merror::Error::DIDResolution(\u001b[0m\u001b[0m\"DID document not found\".to_string()\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++++++++\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            Err(\u001b[0m\u001b[0m\u001b[38;5;10merror::Error::Signing(\u001b[0m\u001b[0m\"DID document not found\".to_string()\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            Err(\u001b[0m\u001b[0m\u001b[38;5;10merror::Error::Verification(\u001b[0m\u001b[0m\"DID document not found\".to_string()\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++++\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            Err(\u001b[0m\u001b[0m\u001b[38;5;10merror::Error::Encryption(\u001b[0m\u001b[0m\"DID document not found\".to_string()\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m      and 5 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4274,"byte_end":4328,"line_start":143,"line_end":143,"column_start":13,"column_end":67,"is_primary":true,"text":[{"text":"        Err(\"Signing not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":67}],"label":"expected `Error`, found `String`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4270,"byte_end":4273,"line_start":143,"line_end":143,"column_start":9,"column_end":12,"is_primary":false,"text":[{"text":"        Err(\"Signing not implemented for DID resolver\".to_string())","highlight_start":9,"highlight_end":12}],"label":"arguments to this enum variant are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type constructed contains `std::string::String` due to the type of the argument passed","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4274,"byte_end":4328,"line_start":143,"line_end":143,"column_start":13,"column_end":67,"is_primary":false,"text":[{"text":"        Err(\"Signing not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":67}],"label":"this argument influences the type of `Err`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4270,"byte_end":4329,"line_start":143,"line_end":143,"column_start":9,"column_end":68,"is_primary":true,"text":[{"text":"        Err(\"Signing not implemented for DID resolver\".to_string())","highlight_start":9,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"tuple variant defined here","code":null,"level":"note","spans":[{"file_name":"/rustc/e71f9a9a98b0faf423844bf0ba7438f29dc27d58/library/core/src/result.rs","byte_start":19916,"byte_end":19919,"line_start":537,"line_end":537,"column_start":5,"column_end":8,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"try wrapping the expression in a variant of `error::Error`","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4274,"byte_end":4274,"line_start":143,"line_end":143,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Signing not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::DIDResolution(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4328,"byte_end":4328,"line_start":143,"line_end":143,"column_start":67,"column_end":67,"is_primary":true,"text":[{"text":"        Err(\"Signing not implemented for DID resolver\".to_string())","highlight_start":67,"highlight_end":67}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4274,"byte_end":4274,"line_start":143,"line_end":143,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Signing not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::Signing(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4328,"byte_end":4328,"line_start":143,"line_end":143,"column_start":67,"column_end":67,"is_primary":true,"text":[{"text":"        Err(\"Signing not implemented for DID resolver\".to_string())","highlight_start":67,"highlight_end":67}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4274,"byte_end":4274,"line_start":143,"line_end":143,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Signing not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::Verification(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4328,"byte_end":4328,"line_start":143,"line_end":143,"column_start":67,"column_end":67,"is_primary":true,"text":[{"text":"        Err(\"Signing not implemented for DID resolver\".to_string())","highlight_start":67,"highlight_end":67}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4274,"byte_end":4274,"line_start":143,"line_end":143,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Signing not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::Encryption(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4328,"byte_end":4328,"line_start":143,"line_end":143,"column_start":67,"column_end":67,"is_primary":true,"text":[{"text":"        Err(\"Signing not implemented for DID resolver\".to_string())","highlight_start":67,"highlight_end":67}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4274,"byte_end":4274,"line_start":143,"line_end":143,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Signing not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::Decryption(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4328,"byte_end":4328,"line_start":143,"line_end":143,"column_start":67,"column_end":67,"is_primary":true,"text":[{"text":"        Err(\"Signing not implemented for DID resolver\".to_string())","highlight_start":67,"highlight_end":67}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4274,"byte_end":4274,"line_start":143,"line_end":143,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Signing not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::InvalidFormat(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4328,"byte_end":4328,"line_start":143,"line_end":143,"column_start":67,"column_end":67,"is_primary":true,"text":[{"text":"        Err(\"Signing not implemented for DID resolver\".to_string())","highlight_start":67,"highlight_end":67}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4274,"byte_end":4274,"line_start":143,"line_end":143,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Signing not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::PluginNotAvailable(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4328,"byte_end":4328,"line_start":143,"line_end":143,"column_start":67,"column_end":67,"is_primary":true,"text":[{"text":"        Err(\"Signing not implemented for DID resolver\".to_string())","highlight_start":67,"highlight_end":67}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4274,"byte_end":4274,"line_start":143,"line_end":143,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Signing not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::SSI(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4328,"byte_end":4328,"line_start":143,"line_end":143,"column_start":67,"column_end":67,"is_primary":true,"text":[{"text":"        Err(\"Signing not implemented for DID resolver\".to_string())","highlight_start":67,"highlight_end":67}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4274,"byte_end":4274,"line_start":143,"line_end":143,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Signing not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::Base64Decode(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4328,"byte_end":4328,"line_start":143,"line_end":143,"column_start":67,"column_end":67,"is_primary":true,"text":[{"text":"        Err(\"Signing not implemented for DID resolver\".to_string())","highlight_start":67,"highlight_end":67}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:143:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Err(\"Signing not implemented for DID resolver\".to_string())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Error`, found `String`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this enum variant are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the type constructed contains `std::string::String` due to the type of the argument passed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:143:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Err(\"Signing not implemented for DID resolver\".to_string())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis argument influences the type of `Err`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: tuple variant defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/rustc/e71f9a9a98b0faf423844bf0ba7438f29dc27d58/library/core/src/result.rs:537:5\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try wrapping the expression in a variant of `error::Error`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Err(\u001b[0m\u001b[0m\u001b[38;5;10merror::Error::DIDResolution(\u001b[0m\u001b[0m\"Signing not implemented for DID resolver\".to_string()\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++++++++\u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Err(\u001b[0m\u001b[0m\u001b[38;5;10merror::Error::Signing(\u001b[0m\u001b[0m\"Signing not implemented for DID resolver\".to_string()\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++\u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Err(\u001b[0m\u001b[0m\u001b[38;5;10merror::Error::Verification(\u001b[0m\u001b[0m\"Signing not implemented for DID resolver\".to_string()\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++++\u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Err(\u001b[0m\u001b[0m\u001b[38;5;10merror::Error::Encryption(\u001b[0m\u001b[0m\"Signing not implemented for DID resolver\".to_string()\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++\u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m      and 5 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4450,"byte_end":4509,"line_start":147,"line_end":147,"column_start":13,"column_end":72,"is_primary":true,"text":[{"text":"        Err(\"Verification not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":72}],"label":"expected `Error`, found `String`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4446,"byte_end":4449,"line_start":147,"line_end":147,"column_start":9,"column_end":12,"is_primary":false,"text":[{"text":"        Err(\"Verification not implemented for DID resolver\".to_string())","highlight_start":9,"highlight_end":12}],"label":"arguments to this enum variant are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type constructed contains `std::string::String` due to the type of the argument passed","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4450,"byte_end":4509,"line_start":147,"line_end":147,"column_start":13,"column_end":72,"is_primary":false,"text":[{"text":"        Err(\"Verification not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":72}],"label":"this argument influences the type of `Err`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4446,"byte_end":4510,"line_start":147,"line_end":147,"column_start":9,"column_end":73,"is_primary":true,"text":[{"text":"        Err(\"Verification not implemented for DID resolver\".to_string())","highlight_start":9,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"tuple variant defined here","code":null,"level":"note","spans":[{"file_name":"/rustc/e71f9a9a98b0faf423844bf0ba7438f29dc27d58/library/core/src/result.rs","byte_start":19916,"byte_end":19919,"line_start":537,"line_end":537,"column_start":5,"column_end":8,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"try wrapping the expression in a variant of `error::Error`","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4450,"byte_end":4450,"line_start":147,"line_end":147,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Verification not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::DIDResolution(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4509,"byte_end":4509,"line_start":147,"line_end":147,"column_start":72,"column_end":72,"is_primary":true,"text":[{"text":"        Err(\"Verification not implemented for DID resolver\".to_string())","highlight_start":72,"highlight_end":72}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4450,"byte_end":4450,"line_start":147,"line_end":147,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Verification not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::Signing(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4509,"byte_end":4509,"line_start":147,"line_end":147,"column_start":72,"column_end":72,"is_primary":true,"text":[{"text":"        Err(\"Verification not implemented for DID resolver\".to_string())","highlight_start":72,"highlight_end":72}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4450,"byte_end":4450,"line_start":147,"line_end":147,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Verification not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::Verification(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4509,"byte_end":4509,"line_start":147,"line_end":147,"column_start":72,"column_end":72,"is_primary":true,"text":[{"text":"        Err(\"Verification not implemented for DID resolver\".to_string())","highlight_start":72,"highlight_end":72}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4450,"byte_end":4450,"line_start":147,"line_end":147,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Verification not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::Encryption(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4509,"byte_end":4509,"line_start":147,"line_end":147,"column_start":72,"column_end":72,"is_primary":true,"text":[{"text":"        Err(\"Verification not implemented for DID resolver\".to_string())","highlight_start":72,"highlight_end":72}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4450,"byte_end":4450,"line_start":147,"line_end":147,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Verification not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::Decryption(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4509,"byte_end":4509,"line_start":147,"line_end":147,"column_start":72,"column_end":72,"is_primary":true,"text":[{"text":"        Err(\"Verification not implemented for DID resolver\".to_string())","highlight_start":72,"highlight_end":72}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4450,"byte_end":4450,"line_start":147,"line_end":147,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Verification not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::InvalidFormat(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4509,"byte_end":4509,"line_start":147,"line_end":147,"column_start":72,"column_end":72,"is_primary":true,"text":[{"text":"        Err(\"Verification not implemented for DID resolver\".to_string())","highlight_start":72,"highlight_end":72}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4450,"byte_end":4450,"line_start":147,"line_end":147,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Verification not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::PluginNotAvailable(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4509,"byte_end":4509,"line_start":147,"line_end":147,"column_start":72,"column_end":72,"is_primary":true,"text":[{"text":"        Err(\"Verification not implemented for DID resolver\".to_string())","highlight_start":72,"highlight_end":72}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4450,"byte_end":4450,"line_start":147,"line_end":147,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Verification not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::SSI(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4509,"byte_end":4509,"line_start":147,"line_end":147,"column_start":72,"column_end":72,"is_primary":true,"text":[{"text":"        Err(\"Verification not implemented for DID resolver\".to_string())","highlight_start":72,"highlight_end":72}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4450,"byte_end":4450,"line_start":147,"line_end":147,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Verification not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::Base64Decode(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4509,"byte_end":4509,"line_start":147,"line_end":147,"column_start":72,"column_end":72,"is_primary":true,"text":[{"text":"        Err(\"Verification not implemented for DID resolver\".to_string())","highlight_start":72,"highlight_end":72}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:147:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Err(\"Verification not implemented for DID resolver\".to_string())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Error`, found `String`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this enum variant are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the type constructed contains `std::string::String` due to the type of the argument passed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:147:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Err(\"Verification not implemented for DID resolver\".to_string())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis argument influences the type of `Err`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: tuple variant defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/rustc/e71f9a9a98b0faf423844bf0ba7438f29dc27d58/library/core/src/result.rs:537:5\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try wrapping the expression in a variant of `error::Error`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Err(\u001b[0m\u001b[0m\u001b[38;5;10merror::Error::DIDResolution(\u001b[0m\u001b[0m\"Verification not implemented for DID resolver\".to_string()\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++++++++\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Err(\u001b[0m\u001b[0m\u001b[38;5;10merror::Error::Signing(\u001b[0m\u001b[0m\"Verification not implemented for DID resolver\".to_string()\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Err(\u001b[0m\u001b[0m\u001b[38;5;10merror::Error::Verification(\u001b[0m\u001b[0m\"Verification not implemented for DID resolver\".to_string()\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++++\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Err(\u001b[0m\u001b[0m\u001b[38;5;10merror::Error::Encryption(\u001b[0m\u001b[0m\"Verification not implemented for DID resolver\".to_string()\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m      and 5 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4625,"byte_end":4682,"line_start":151,"line_end":151,"column_start":13,"column_end":70,"is_primary":true,"text":[{"text":"        Err(\"Encryption not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":70}],"label":"expected `Error`, found `String`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4621,"byte_end":4624,"line_start":151,"line_end":151,"column_start":9,"column_end":12,"is_primary":false,"text":[{"text":"        Err(\"Encryption not implemented for DID resolver\".to_string())","highlight_start":9,"highlight_end":12}],"label":"arguments to this enum variant are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type constructed contains `std::string::String` due to the type of the argument passed","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4625,"byte_end":4682,"line_start":151,"line_end":151,"column_start":13,"column_end":70,"is_primary":false,"text":[{"text":"        Err(\"Encryption not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":70}],"label":"this argument influences the type of `Err`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4621,"byte_end":4683,"line_start":151,"line_end":151,"column_start":9,"column_end":71,"is_primary":true,"text":[{"text":"        Err(\"Encryption not implemented for DID resolver\".to_string())","highlight_start":9,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"tuple variant defined here","code":null,"level":"note","spans":[{"file_name":"/rustc/e71f9a9a98b0faf423844bf0ba7438f29dc27d58/library/core/src/result.rs","byte_start":19916,"byte_end":19919,"line_start":537,"line_end":537,"column_start":5,"column_end":8,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"try wrapping the expression in a variant of `error::Error`","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4625,"byte_end":4625,"line_start":151,"line_end":151,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Encryption not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::DIDResolution(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4682,"byte_end":4682,"line_start":151,"line_end":151,"column_start":70,"column_end":70,"is_primary":true,"text":[{"text":"        Err(\"Encryption not implemented for DID resolver\".to_string())","highlight_start":70,"highlight_end":70}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4625,"byte_end":4625,"line_start":151,"line_end":151,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Encryption not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::Signing(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4682,"byte_end":4682,"line_start":151,"line_end":151,"column_start":70,"column_end":70,"is_primary":true,"text":[{"text":"        Err(\"Encryption not implemented for DID resolver\".to_string())","highlight_start":70,"highlight_end":70}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4625,"byte_end":4625,"line_start":151,"line_end":151,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Encryption not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::Verification(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4682,"byte_end":4682,"line_start":151,"line_end":151,"column_start":70,"column_end":70,"is_primary":true,"text":[{"text":"        Err(\"Encryption not implemented for DID resolver\".to_string())","highlight_start":70,"highlight_end":70}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4625,"byte_end":4625,"line_start":151,"line_end":151,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Encryption not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::Encryption(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4682,"byte_end":4682,"line_start":151,"line_end":151,"column_start":70,"column_end":70,"is_primary":true,"text":[{"text":"        Err(\"Encryption not implemented for DID resolver\".to_string())","highlight_start":70,"highlight_end":70}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4625,"byte_end":4625,"line_start":151,"line_end":151,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Encryption not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::Decryption(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4682,"byte_end":4682,"line_start":151,"line_end":151,"column_start":70,"column_end":70,"is_primary":true,"text":[{"text":"        Err(\"Encryption not implemented for DID resolver\".to_string())","highlight_start":70,"highlight_end":70}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4625,"byte_end":4625,"line_start":151,"line_end":151,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Encryption not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::InvalidFormat(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4682,"byte_end":4682,"line_start":151,"line_end":151,"column_start":70,"column_end":70,"is_primary":true,"text":[{"text":"        Err(\"Encryption not implemented for DID resolver\".to_string())","highlight_start":70,"highlight_end":70}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4625,"byte_end":4625,"line_start":151,"line_end":151,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Encryption not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::PluginNotAvailable(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4682,"byte_end":4682,"line_start":151,"line_end":151,"column_start":70,"column_end":70,"is_primary":true,"text":[{"text":"        Err(\"Encryption not implemented for DID resolver\".to_string())","highlight_start":70,"highlight_end":70}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4625,"byte_end":4625,"line_start":151,"line_end":151,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Encryption not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::SSI(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4682,"byte_end":4682,"line_start":151,"line_end":151,"column_start":70,"column_end":70,"is_primary":true,"text":[{"text":"        Err(\"Encryption not implemented for DID resolver\".to_string())","highlight_start":70,"highlight_end":70}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4625,"byte_end":4625,"line_start":151,"line_end":151,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Encryption not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::Base64Decode(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4682,"byte_end":4682,"line_start":151,"line_end":151,"column_start":70,"column_end":70,"is_primary":true,"text":[{"text":"        Err(\"Encryption not implemented for DID resolver\".to_string())","highlight_start":70,"highlight_end":70}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:151:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Err(\"Encryption not implemented for DID resolver\".to_string())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Error`, found `String`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this enum variant are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the type constructed contains `std::string::String` due to the type of the argument passed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:151:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Err(\"Encryption not implemented for DID resolver\".to_string())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis argument influences the type of `Err`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: tuple variant defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/rustc/e71f9a9a98b0faf423844bf0ba7438f29dc27d58/library/core/src/result.rs:537:5\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try wrapping the expression in a variant of `error::Error`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Err(\u001b[0m\u001b[0m\u001b[38;5;10merror::Error::DIDResolution(\u001b[0m\u001b[0m\"Encryption not implemented for DID resolver\".to_string()\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++++++++\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Err(\u001b[0m\u001b[0m\u001b[38;5;10merror::Error::Signing(\u001b[0m\u001b[0m\"Encryption not implemented for DID resolver\".to_string()\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Err(\u001b[0m\u001b[0m\u001b[38;5;10merror::Error::Verification(\u001b[0m\u001b[0m\"Encryption not implemented for DID resolver\".to_string()\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++++\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Err(\u001b[0m\u001b[0m\u001b[38;5;10merror::Error::Encryption(\u001b[0m\u001b[0m\"Encryption not implemented for DID resolver\".to_string()\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m      and 5 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4792,"byte_end":4849,"line_start":155,"line_end":155,"column_start":13,"column_end":70,"is_primary":true,"text":[{"text":"        Err(\"Decryption not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":70}],"label":"expected `Error`, found `String`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4788,"byte_end":4791,"line_start":155,"line_end":155,"column_start":9,"column_end":12,"is_primary":false,"text":[{"text":"        Err(\"Decryption not implemented for DID resolver\".to_string())","highlight_start":9,"highlight_end":12}],"label":"arguments to this enum variant are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type constructed contains `std::string::String` due to the type of the argument passed","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4792,"byte_end":4849,"line_start":155,"line_end":155,"column_start":13,"column_end":70,"is_primary":false,"text":[{"text":"        Err(\"Decryption not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":70}],"label":"this argument influences the type of `Err`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4788,"byte_end":4850,"line_start":155,"line_end":155,"column_start":9,"column_end":71,"is_primary":true,"text":[{"text":"        Err(\"Decryption not implemented for DID resolver\".to_string())","highlight_start":9,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"tuple variant defined here","code":null,"level":"note","spans":[{"file_name":"/rustc/e71f9a9a98b0faf423844bf0ba7438f29dc27d58/library/core/src/result.rs","byte_start":19916,"byte_end":19919,"line_start":537,"line_end":537,"column_start":5,"column_end":8,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"try wrapping the expression in a variant of `error::Error`","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4792,"byte_end":4792,"line_start":155,"line_end":155,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Decryption not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::DIDResolution(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4849,"byte_end":4849,"line_start":155,"line_end":155,"column_start":70,"column_end":70,"is_primary":true,"text":[{"text":"        Err(\"Decryption not implemented for DID resolver\".to_string())","highlight_start":70,"highlight_end":70}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4792,"byte_end":4792,"line_start":155,"line_end":155,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Decryption not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::Signing(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4849,"byte_end":4849,"line_start":155,"line_end":155,"column_start":70,"column_end":70,"is_primary":true,"text":[{"text":"        Err(\"Decryption not implemented for DID resolver\".to_string())","highlight_start":70,"highlight_end":70}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4792,"byte_end":4792,"line_start":155,"line_end":155,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Decryption not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::Verification(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4849,"byte_end":4849,"line_start":155,"line_end":155,"column_start":70,"column_end":70,"is_primary":true,"text":[{"text":"        Err(\"Decryption not implemented for DID resolver\".to_string())","highlight_start":70,"highlight_end":70}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4792,"byte_end":4792,"line_start":155,"line_end":155,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Decryption not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::Encryption(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4849,"byte_end":4849,"line_start":155,"line_end":155,"column_start":70,"column_end":70,"is_primary":true,"text":[{"text":"        Err(\"Decryption not implemented for DID resolver\".to_string())","highlight_start":70,"highlight_end":70}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4792,"byte_end":4792,"line_start":155,"line_end":155,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Decryption not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::Decryption(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4849,"byte_end":4849,"line_start":155,"line_end":155,"column_start":70,"column_end":70,"is_primary":true,"text":[{"text":"        Err(\"Decryption not implemented for DID resolver\".to_string())","highlight_start":70,"highlight_end":70}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4792,"byte_end":4792,"line_start":155,"line_end":155,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Decryption not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::InvalidFormat(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4849,"byte_end":4849,"line_start":155,"line_end":155,"column_start":70,"column_end":70,"is_primary":true,"text":[{"text":"        Err(\"Decryption not implemented for DID resolver\".to_string())","highlight_start":70,"highlight_end":70}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4792,"byte_end":4792,"line_start":155,"line_end":155,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Decryption not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::PluginNotAvailable(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4849,"byte_end":4849,"line_start":155,"line_end":155,"column_start":70,"column_end":70,"is_primary":true,"text":[{"text":"        Err(\"Decryption not implemented for DID resolver\".to_string())","highlight_start":70,"highlight_end":70}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4792,"byte_end":4792,"line_start":155,"line_end":155,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Decryption not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::SSI(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4849,"byte_end":4849,"line_start":155,"line_end":155,"column_start":70,"column_end":70,"is_primary":true,"text":[{"text":"        Err(\"Decryption not implemented for DID resolver\".to_string())","highlight_start":70,"highlight_end":70}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4792,"byte_end":4792,"line_start":155,"line_end":155,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        Err(\"Decryption not implemented for DID resolver\".to_string())","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"error::Error::Base64Decode(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":4849,"byte_end":4849,"line_start":155,"line_end":155,"column_start":70,"column_end":70,"is_primary":true,"text":[{"text":"        Err(\"Decryption not implemented for DID resolver\".to_string())","highlight_start":70,"highlight_end":70}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:155:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Err(\"Decryption not implemented for DID resolver\".to_string())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Error`, found `String`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this enum variant are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the type constructed contains `std::string::String` due to the type of the argument passed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:155:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Err(\"Decryption not implemented for DID resolver\".to_string())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis argument influences the type of `Err`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: tuple variant defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/rustc/e71f9a9a98b0faf423844bf0ba7438f29dc27d58/library/core/src/result.rs:537:5\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try wrapping the expression in a variant of `error::Error`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Err(\u001b[0m\u001b[0m\u001b[38;5;10merror::Error::DIDResolution(\u001b[0m\u001b[0m\"Decryption not implemented for DID resolver\".to_string()\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++++++++\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Err(\u001b[0m\u001b[0m\u001b[38;5;10merror::Error::Signing(\u001b[0m\u001b[0m\"Decryption not implemented for DID resolver\".to_string()\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Err(\u001b[0m\u001b[0m\u001b[38;5;10merror::Error::Verification(\u001b[0m\u001b[0m\"Decryption not implemented for DID resolver\".to_string()\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++++\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Err(\u001b[0m\u001b[0m\u001b[38;5;10merror::Error::Encryption(\u001b[0m\u001b[0m\"Decryption not implemented for DID resolver\".to_string()\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++++++\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m      and 5 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `Signer`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tap-didcomm-core/src/pack.rs","byte_start":223,"byte_end":229,"line_start":8,"line_end":8,"column_start":53,"column_end":59,"is_primary":true,"text":[{"text":"    plugin::{DIDCommPlugin, DIDResolver, Encryptor, Signer},","highlight_start":53,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Signer`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/pack.rs:8:53\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    plugin::{DIDCommPlugin, DIDResolver, Encryptor, Signer},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `Encryptor`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tap-didcomm-core/src/pack.rs","byte_start":212,"byte_end":221,"line_start":8,"line_end":8,"column_start":42,"column_end":51,"is_primary":true,"text":[{"text":"    plugin::{DIDCommPlugin, DIDResolver, Encryptor, Signer},","highlight_start":42,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Encryptor`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/pack.rs:8:42\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    plugin::{DIDCommPlugin, DIDResolver, Encryptor, Signer},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 26 previous errors; 9 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 26 previous errors; 9 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0046, E0107, E0308, E0407, E0428, E0432, E0433, E0603.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0046, E0107, E0308, E0407, E0428, E0432, E0433, E0603.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0046`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0046`.\u001b[0m\n"}
