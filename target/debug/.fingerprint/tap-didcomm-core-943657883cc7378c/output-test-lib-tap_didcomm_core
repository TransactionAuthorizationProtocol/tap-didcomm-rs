{"$message_type":"diagnostic","message":"unused import: `ssi::did::Document`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":92,"byte_end":110,"line_start":4,"line_end":4,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"use ssi::did::Document;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":88,"byte_end":112,"line_start":4,"line_end":5,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use ssi::did::Document;","highlight_start":1,"highlight_end":24},{"text":"use ssi::did_resolve::{DIDResolver as SSIResolver, ResolutionMetadata};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `ssi::did::Document`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ssi::did::Document;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `ResolutionMetadata`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":163,"byte_end":181,"line_start":5,"line_end":5,"column_start":52,"column_end":70,"is_primary":true,"text":[{"text":"use ssi::did_resolve::{DIDResolver as SSIResolver, ResolutionMetadata};","highlight_start":52,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":161,"byte_end":181,"line_start":5,"line_end":5,"column_start":50,"column_end":70,"is_primary":true,"text":[{"text":"use ssi::did_resolve::{DIDResolver as SSIResolver, ResolutionMetadata};","highlight_start":50,"highlight_end":70}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":134,"byte_end":135,"line_start":5,"line_end":5,"column_start":23,"column_end":24,"is_primary":true,"text":[{"text":"use ssi::did_resolve::{DIDResolver as SSIResolver, ResolutionMetadata};","highlight_start":23,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":181,"byte_end":182,"line_start":5,"line_end":5,"column_start":70,"column_end":71,"is_primary":true,"text":[{"text":"use ssi::did_resolve::{DIDResolver as SSIResolver, ResolutionMetadata};","highlight_start":70,"highlight_end":71}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `ResolutionMetadata`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:5:52\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse ssi::did_resolve::{DIDResolver as SSIResolver, ResolutionMetadata};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `async_trait::async_trait`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tap-didcomm-core/src/tests.rs","byte_start":214,"byte_end":238,"line_start":8,"line_end":8,"column_start":9,"column_end":33,"is_primary":true,"text":[{"text":"    use async_trait::async_trait;","highlight_start":9,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/tests.rs","byte_start":210,"byte_end":239,"line_start":8,"line_end":8,"column_start":5,"column_end":34,"is_primary":true,"text":[{"text":"    use async_trait::async_trait;","highlight_start":5,"highlight_end":34}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `async_trait::async_trait`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/tests.rs:8:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use async_trait::async_trait;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `mockall::predicate`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tap-didcomm-core/src/tests.rs","byte_start":248,"byte_end":266,"line_start":9,"line_end":9,"column_start":9,"column_end":27,"is_primary":true,"text":[{"text":"    use mockall::predicate;","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/tests.rs","byte_start":244,"byte_end":267,"line_start":9,"line_end":9,"column_start":5,"column_end":28,"is_primary":true,"text":[{"text":"    use mockall::predicate;","highlight_start":5,"highlight_end":28}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `mockall::predicate`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/tests.rs:9:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use mockall::predicate;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `crate::error::Result`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tap-didcomm-core/src/tests.rs","byte_start":1502,"byte_end":1522,"line_start":49,"line_end":49,"column_start":13,"column_end":33,"is_primary":true,"text":[{"text":"        use crate::error::Result;","highlight_start":13,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"tap-didcomm-core/src/tests.rs","byte_start":1498,"byte_end":1523,"line_start":49,"line_end":49,"column_start":9,"column_end":34,"is_primary":true,"text":[{"text":"        use crate::error::Result;","highlight_start":9,"highlight_end":34}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::error::Result`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/tests.rs:49:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        use crate::error::Result;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"implementation of `Predicate` is not general enough","code":null,"level":"error","spans":[{"file_name":"tap-didcomm-core/src/plugin.rs","byte_start":5733,"byte_end":6051,"line_start":201,"line_end":207,"column_start":9,"column_end":14,"is_primary":true,"text":[{"text":"        plugin","highlight_start":9,"highlight_end":15},{"text":"            .expect_encrypt()","highlight_start":1,"highlight_end":30},{"text":"            .with(","highlight_start":1,"highlight_end":19},{"text":"                mockall::predicate::eq([116, 101, 115, 116].as_slice()),","highlight_start":1,"highlight_end":73},{"text":"                mockall::predicate::eq(vec![String::from(\"did:example:bob\")]),","highlight_start":1,"highlight_end":79},{"text":"                mockall::predicate::function(|x: &Option<&str>| *x == Some(\"did:example:alice\"))","highlight_start":1,"highlight_end":97},{"text":"            )","highlight_start":1,"highlight_end":14}],"label":"implementation of `Predicate` is not general enough","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`predicates::function::FnPredicate<{closure@tap-didcomm-core/src/plugin.rs:206:46: 206:64}, std::option::Option<&'2 str>>` must implement `Predicate<std::option::Option<&'1 str>>`, for any lifetime `'1`...","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"...but it actually implements `Predicate<std::option::Option<&'2 str>>`, for some specific lifetime `'2`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: implementation of `Predicate` is not general enough\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/plugin.rs:201:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        plugin\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .expect_encrypt()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m203\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .with(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m204\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                mockall::predicate::eq([116, 101, 115, 116].as_slice()),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m205\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                mockall::predicate::eq(vec![String::from(\"did:example:bob\")]),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m206\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                mockall::predicate::function(|x: &Option<&str>| *x == Some(\"did:example:alice\"))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m207\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mimplementation of `Predicate` is not general enough\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `predicates::function::FnPredicate<{closure@tap-didcomm-core/src/plugin.rs:206:46: 206:64}, std::option::Option<&'2 str>>` must implement `Predicate<std::option::Option<&'1 str>>`, for any lifetime `'1`...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: ...but it actually implements `Predicate<std::option::Option<&'2 str>>`, for some specific lifetime `'2`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"implementation of `Predicate` is not general enough","code":null,"level":"error","spans":[{"file_name":"tap-didcomm-core/src/tests.rs","byte_start":2590,"byte_end":2871,"line_start":81,"line_end":87,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"            plugin","highlight_start":13,"highlight_end":19},{"text":"                .expect_encrypt()","highlight_start":1,"highlight_end":34},{"text":"                .with(","highlight_start":1,"highlight_end":23},{"text":"                    eq(test_bytes),","highlight_start":1,"highlight_end":36},{"text":"                    eq(vec![String::from(\"did:example:bob\")]),","highlight_start":1,"highlight_end":63},{"text":"                    mockall::predicate::function(|x: &Option<&str>| *x == Some(\"did:example:alice\"))","highlight_start":1,"highlight_end":101},{"text":"                )","highlight_start":1,"highlight_end":18}],"label":"implementation of `Predicate` is not general enough","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`predicates::function::FnPredicate<{closure@tap-didcomm-core/src/tests.rs:86:50: 86:68}, std::option::Option<&'2 str>>` must implement `Predicate<std::option::Option<&'1 str>>`, for any lifetime `'1`...","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"...but it actually implements `Predicate<std::option::Option<&'2 str>>`, for some specific lifetime `'2`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: implementation of `Predicate` is not general enough\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtap-didcomm-core/src/tests.rs:81:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            plugin\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                .expect_encrypt()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                .with(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    eq(test_bytes),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m85\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    eq(vec![String::from(\"did:example:bob\")]),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    mockall::predicate::function(|x: &Option<&str>| *x == Some(\"did:example:alice\"))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                )\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mimplementation of `Predicate` is not general enough\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `predicates::function::FnPredicate<{closure@tap-didcomm-core/src/tests.rs:86:50: 86:68}, std::option::Option<&'2 str>>` must implement `Predicate<std::option::Option<&'1 str>>`, for any lifetime `'1`...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: ...but it actually implements `Predicate<std::option::Option<&'2 str>>`, for some specific lifetime `'2`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 2 previous errors; 5 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors; 5 warnings emitted\u001b[0m\n\n"}
