---
description: Lessons learnt by Cursor
globs: *
---
During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursor/rules/lessons.mdc` file so you will not make the same mistake again.

# Lessons

## Workspace Configuration
- Keep WASM-specific dependencies at the crate level rather than in workspace dependencies
- Handle getrandom dependency at the crate level with appropriate features
- Use separate WASM targets for web and Node.js builds
- Ensure consistent versioning of WASM-related dependencies across crates

## DIDComm Testing
- When implementing mock plugins for DIDComm testing, ensure base64 encoding/decoding is handled correctly
- For mock encryption/decryption, use base64 encoding as a simple test mechanism
- Test both success and error cases for message handling
- Ensure proper error handling in async operations
- Avoid duplicate trait implementations by using derive macros
- Use Arc for thread-safe sharing of mock plugins in tests
- Keep mock implementations simple but functional for testing purposes
- Implement all required traits for mock plugins (DIDResolver, Signer, Encryptor)

## Mock Plugin Implementation
- Use #[async_trait] macro consistently for async trait implementations
- Implement proper error conversion between core and node crates
- Keep mock implementations stateless when possible
- Use base64 encoding/decoding for simple mock cryptographic operations
- Return meaningful test data that can be validated
- Include comprehensive test cases for each mock implementation

## Test Organization
- Group tests logically by functionality
- Test both success and error paths
- Use descriptive test names that indicate what is being tested
- Include setup and teardown code where needed
- Mock external dependencies appropriately
- Test edge cases and boundary conditions
- Ensure test isolation and independence

## Error Handling
- Implement proper error conversion between crates
- Use thiserror for deriving error implementations
- Ensure error messages are descriptive and helpful
- Handle all possible error cases in mock implementations
- Test error conditions explicitly
- Propagate errors appropriately using the ? operator
- Test error handling in async operations

## TypeScript Configuration
- Always use type-only imports for types when verbatimModuleSyntax is enabled
- Handle undefined error objects safely with optional chaining and nullish coalescing
- Ensure proper error handling in async/await operations
- Use proper TypeScript types for Uint8Array data in crypto operations
- Keep WASM-specific types separate from core types
- Implement proper error handling for all async operations
- Use proper TypeScript configuration for WASM integration

## Cryptographic Implementations
- Use constant-time operations for cryptographic comparisons to prevent timing attacks
- Implement comprehensive test vectors for all cryptographic operations
- Ensure proper key material zeroization when dropped
- Add detailed security considerations in module-level documentation
- Use type aliases for cryptographic types to improve code readability and maintainability
- Implement thorough input validation for all cryptographic parameters
- Add comprehensive error handling for all cryptographic operations
- Use appropriate error types that don't leak sensitive information
- Include test cases for invalid inputs and error conditions
- Document security considerations and recommendations in public APIs
- Use appropriate algorithm choices and provide guidance on algorithm selection
- Implement proper key derivation and management practices
- Add test cases for key agreement, encryption, and authentication
- Use appropriate nonce/IV generation and management
- Implement proper padding validation for block ciphers
- Add test cases for compressed and uncompressed key formats
- Use appropriate base64 encoding for JWE header parameters
- Implement proper AEAD (Authenticated Encryption with Associated Data) handling
- Add test cases for tampering detection in authenticated encryption
- Use appropriate key sizes and validate key lengths

## Rust Package
- Keep WASM-specific dependencies at the crate level
- Handle getrandom dependency at the crate level with appropriate features
- Use separate WASM targets for web and Node.js builds
- Ensure consistent versioning of dependencies across crates

## DIDComm Testing
- When implementing mock plugins for DIDComm testing, ensure base64 encoding/decoding is handled correctly
- For mock encryption/decryption, use base64 encoding as a simple test mechanism
- Test both success and error cases for message handling
- Ensure proper error handling in async operations

## Error Handling
- Implement proper error conversion between crates
- Use thiserror for deriving error implementations
- Ensure error messages are descriptive and helpful
- Handle all possible error cases in mock implementations
- Test error conditions explicitly



