During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.

The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# PRDs

Always refer to the PRDs to understand the project and mark any tasks done when you finish them.

- [v1.md](prds/v1.md)

# Rust Rules

- Always write idiomatic Rust code.
- Every new function or module must include comprehensive unit tests.
- Use Rust's error handling best practices (Result<T, E>, ? operator, etc.).
- Document all public APIs with rustdoc comments (///).
- Maintain a modular design: keep CAIP, DIDComm, TAP core, and WASM bindings separate.
- Use cargo fmt and clippy for formatting and linting.
- Prioritize clear and maintainable code.
- Check off tasks in the project plan file as soon as they are complete.
- Ensure CI/CD integration is updated as features are added.
- Always ensure that tests are run before finishing a task
- Aim for 100% test coverage on all modules.
- For WASM components, ensure proper bindings with `wasm-bindgen` and test in a JavaScript environment.
- Provide TypeScript definitions that accurately reflect the WASM APIs.
- When running `cargo doc` please do not use the `--open` flag.

# Lessons

## User Specified Lessons
- Always resolve the warnings and errors in the code before completing a task
- Always run root level tests before completing a task

## Cursor learned

### DIDComm Testing
- When implementing mock plugins for DIDComm testing, ensure base64 encoding/decoding is handled correctly
- For mock encryption/decryption, use base64 encoding as a simple test mechanism
- Test both success and error cases for message handling
- Ensure proper error handling in async operations

### Workspace Configuration
- For Rust 2021 edition projects, explicitly set `workspace.resolver = "2"` in the root Cargo.toml
- Keep workspace manifest keys minimal, removing unused ones like name, version, etc. when using a virtual manifest

# Scratchpad

## Current Task: Cleaning Up Code Warnings

### Progress
[X] Fix missing tests module in tap-didcomm-node
[X] Fix syntax error in plugin.rs
[X] Fix missing CoreMessage import in node.rs
[X] Fix type mismatch issues in mock tests
[X] Fix MockResolver trait implementation
[X] Add new function for Message in actor.rs
[X] Clean up unused imports in plugin.rs
[X] Clean up unused imports in error.rs
[X] Fix async test issues in actor.rs and node.rs
[X] Set workspace resolver to version 2
[X] Remove unused manifest keys from workspace configuration

### Completed
1. Fixed test runtime errors in actor.rs and node.rs:
   - Removed block_on usage in async tests
   - Fixed test_logging_actor and test_receive_message
2. Added missing sender to test messages
3. All tests now passing across all crates
4. Cleaned up unused imports in plugin.rs and error.rs
5. Updated workspace configuration:
   - Set resolver to version 2 for Rust 2021 edition compatibility
   - Removed unused manifest keys from workspace section

### Next Steps
All warnings have been resolved and all tests are passing. No further steps needed.

## Current Task: Fixing Test Issues in tap-didcomm-web

### Progress
[X] Identified test failures in end-to-end message flow
[X] Fixed mock plugin implementation
[X] Fix test_end_to_end_message_flow test
  [X] Update message handling to properly handle base64 encoding/decoding
  [X] Ensure proper error handling in async operations
  [X] Verify message flow with updated mock plugin

### Completed
1. Fixed test_end_to_end_message_flow by properly handling message packing and encoding:
   - Pack message using mock plugin
   - Base64 encode packed message
   - Send to endpoint
2. All tests now passing
3. Proper error handling in place

### Next Steps
1. Clean up unused imports (Message from tap_didcomm_node::actor)
2. Consider addressing workspace resolver warnings
3. Consider cleaning up unused manifest keys in Cargo.toml
