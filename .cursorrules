During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.

The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# PRDs

Always refer to the PRDs to understand the project and mark any tasks done when you finish them.

- [v1.md](prds/v1.md)

# Rust Rules

- Always write idiomatic Rust code.
- Every new function or module must include comprehensive unit tests.
- Use Rust's error handling best practices (Result<T, E>, ? operator, etc.).
- Document all public APIs with rustdoc comments (///).
- Maintain a modular design: keep CAIP, DIDComm, TAP core, and WASM bindings separate.
- Use cargo fmt and clippy for formatting and linting.
- Prioritize clear and maintainable code.
- Check off tasks in the project plan file as soon as they are complete.
- Ensure CI/CD integration is updated as features are added.
- Always ensure that tests are run before finishing a task
- Aim for 100% test coverage on all modules.
- For WASM components, ensure proper bindings with `wasm-bindgen` and test in a JavaScript environment.
- Provide TypeScript definitions that accurately reflect the WASM APIs.
- When running `cargo doc` please do not use the `--open` flag.

# Lessons

## User Specified Lessons


## Cursor learned


### TypeScript Testing with Jest

- When mocking WASM modules, create a separate `__mocks__` directory with the mock implementation
- Use `jest.mock()` in the setup file to mock the module
- Implement proper type checking in the mock to match the real implementation
- Test both success and error cases for async functions

# Scratchpad

## Current Task: Initial Project Setup and Implementation

This is a Rust project to build a modular DIDComm v2 library with three main crates:
1. tap-didcomm-core: Core message handling with async signing/encryption
2. tap-didcomm-node: Abstract DIDComm node with Actix Actor support
3. tap-didcomm-web: HTTP server wrapper using Actix-web

### Progress
[ ] Initial workspace setup
[ ] Core crate implementation
[ ] Node crate implementation  
[ ] Web crate implementation

### Next Steps

1. Initialize the workspace structure:
   [ ] Create workspace Cargo.toml
   [ ] Add MIT license
   [ ] Create initial README.md
   [ ] Set up GitHub Actions CI

2. Set up tap-didcomm-core:
   [ ] Create crate structure
   [ ] Define message types
   [ ] Implement core packing/unpacking
   [ ] Add plugin architecture
   [ ] Write tests

Let's start with the workspace initialization first.
