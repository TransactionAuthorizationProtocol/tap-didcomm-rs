During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.

The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# PRDs

Always refer to the PRDs to understand the project and mark any tasks done when you finish them.

- [v1.md](prds/v1.md)

# Rust Rules

- Always write idiomatic Rust code.
- Every new function or module must include comprehensive unit tests.
- Use Rust's error handling best practices (Result<T, E>, ? operator, etc.).
- Document all public APIs with rustdoc comments (///).
- Maintain a modular design: keep CAIP, DIDComm, TAP core, and WASM bindings separate.
- Use cargo fmt and clippy for formatting and linting.
- Prioritize clear and maintainable code.
- Check off tasks in the project plan file as soon as they are complete.
- Ensure CI/CD integration is updated as features are added.
- Always ensure that tests are run before finishing a task
- Aim for 100% test coverage on all modules.
- For WASM components, ensure proper bindings with `wasm-bindgen` and test in a JavaScript environment.
- Provide TypeScript definitions that accurately reflect the WASM APIs.
- When running `cargo doc` please do not use the `--open` flag.

# Lessons

## User Specified Lessons
- Always resolve the warnings and errors in the code before completing a task
- Always run root level tests before completing a task

## Cursor learned

### DIDComm Testing
- When implementing mock plugins for DIDComm testing, ensure base64 encoding/decoding is handled correctly
- For mock encryption/decryption, use base64 encoding as a simple test mechanism
- Test both success and error cases for message handling
- Ensure proper error handling in async operations

### JWE Implementation
- Support both X25519 and NIST curves (P-256, P-384, P-521) for ECDH key agreement
- Ensure public keys for NIST curves are in uncompressed format
- Use zeroize trait for secure memory cleanup of sensitive key material
- Implement proper key derivation using HKDF with appropriate info strings
- Test key agreement and derivation with all supported curves
- Ensure proper error handling for invalid key material and formats
- Validate all base64url-encoded fields during decryption
- Test both anoncrypt and authcrypt flows with roundtrip encryption/decryption
- When implementing multiple recipients, ensure each recipient can decrypt with their own key
- Share protected header and content encryption across all recipients for efficiency

### Workspace Configuration
- For Rust 2021 edition projects, explicitly set `workspace.resolver = "2"` in the root Cargo.toml
- Keep workspace manifest keys minimal, removing unused ones like name, version, etc. when using a virtual manifest

# Scratchpad

## Current Task: Implementing JWE Module

### Progress
[X] Implement key agreement algorithms (ECDH-ES, ECDH-1PU)
[X] Add support for NIST curves (P-256, P-384, P-521)
[X] Implement key wrapping (AES-KW)
[X] Implement content encryption algorithms
  [X] AES-256-GCM
  [X] XChaCha20-Poly1305
  [X] AES-256-CBC-HMAC-SHA-512
[X] Create JWE message structure
[X] Implement encryption (anoncrypt, authcrypt)
[X] Implement decryption
[X] Add comprehensive tests
  [X] Key agreement tests
  [X] Content encryption tests
  [X] End-to-end encryption/decryption tests
  [X] Error handling tests
[X] Add support for multiple recipients
  [X] Update JWE message structure
  [X] Modify encryption methods
  [X] Enhance decryption to try each recipient
  [X] Add tests for multiple recipients

### Next Steps
1. Add support for APU/APV parameters in key derivation
2. Add support for compressed NIST curve points
3. Add more test vectors from RFC 7516

### Completed
1. Implemented complete JWE encryption/decryption flow
2. Added support for all required curves and algorithms
3. Added comprehensive test suite
4. Ensured proper error handling and validation
5. Used secure memory handling for sensitive data
6. Added support for multiple recipients with shared content encryption

